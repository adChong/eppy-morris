Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
install.packages("rstan", repos = "http://cloud.r-project.org/", dependencies=TRUE)
system("defaults write org.R-project.R force.LANG en_US.UTF-8")
rgamma(1000,5,5)
x=rgamma(1000,5,5)
x1=rgamma(1000,5,5)
x2=rgamma(1000,10,10)
dat <- rbind(data.frame(x=x1,type='rgamma(5,5)'),data.frame(x=x2,type='rgamma(10,10'))
dat <- rbind(data.frame(x=x1,type='rgamma(5,5)'),data.frame(x=x2,type='rgamma(10,10)'))
ggplot(data=dat,aes(x=x,color=type,fill=type))+geom_histogram()
library(ggplot2)
ggplot(data=dat,aes(x=x,color=type,fill=type))+geom_histogram()
ggplot(data=dat,aes(x=x,color=type,fill=type))+geom_histogram(alpha=.5, position="identity")
mean(x1)
mean(x2)
n=10
m=100
npred=10
c((1:n),(nm+1):(nm+npred))
c((1:n),(m+1):(nm+npred))
c((1:n),(m+1):(m+npred))
setwd("/Volumes/DISK_IMG")
dat <- read.csv('TRY.csv',header = TRUE)
View(dat)
apply(is.numeric(dat),2)
apply(dat,2,is.numeric(dat),2)
apply(dat,2,is.numeric)
View(dat)
?read.csv
colnames(dat)
summary(dat)
dat.summary <- summary(dat)
View(dat.summary)
dat.summary
View(dat)
?read.csv
import.csv <- function(filename) {
return(read.csv(filename, sep=",", header = TRUE, stringsAsFactors = FALSE,
na.strings = c("null","NA","NaN")))
}
dat <- import.csv('TRY.csv',header = TRUE)
dat <- import.csv('TRY.csv')
View(dat)
df <- na.rm(dat)
df <- rm.na(dat)
df <- na.omit(dat)
write.csv(dat,'newdata.csv')
View(dat)
df <- import.csv('newdata.csv')
df <- na.omit(df)
install.packages("FSelector")
library(FSelector)
library(stan)
library(Stan)
library(rstan)
?stan_hist
?extract
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
cat("\nCXXFLAGS += -Wno-ignored-attributes -Wno-deprecated-declarations",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
cat(M)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 )
?strptime
setwd("~/Documents/GitHub/bc-stan/src")
source('~/Documents/GitHub/bc-stan/src/main.R')
setwd("~/Documents/GitHub/bc-stan/src")
source('~/Documents/GitHub/bc-stan/src/main.R')
print(plt)
i=1
i=2
field_data <- data.frame(yf=DATAFIELD[, 1],
xf=signif(DATAFIELD[, (i+1)], 3))
pred_data <- matrix(data=t(y_pred),
nrow=length(y_pred), ncol = 1)
plot_data <- data.frame(apply(field_data, 2, rep,
n_samples), pred = pred_data)
plt <- ggplot(data = plot_data, aes(y=pred, x=xf, group=xf)) +
geom_boxplot(outlier.size=0.2) +
geom_point(data = field_data, aes(x=xf, y=yf),
color="#D55E00", size=0.8)
print(plt)
source('~/Documents/GitHub/bc-stan/src/main.R')
source("util.R")
library(rstan)
setwd("~/Documents/GitHub/bc-stan/src")
library(rstan)
source("util.R")
DATACOMP <- read.csv("DATACOMP.csv", header = TRUE)
DATAFIELD <- read.csv ("DATAFIELD.csv", header = TRUE)
p <- ncol(DATAFIELD) - 1 # number of input factors
q <- ncol(DATACOMP) - p - 1 # number of calibration parameters
n <- nrow(DATAFIELD) # sample size of observed field data
m <- nrow(DATACOMP) # sample size of computer simulation data
y <- DATAFIELD[,1] # observed output
xf <- DATAFIELD[,2:(1+p)] # observed input
eta <- DATACOMP[,1] # simulation output
xc <- DATACOMP[,2:(1+p)] # simulation input
tc <- DATACOMP[,(2+p):(1+p+q)] # calibration parameters
x_pred <- xf # design points for predictions
n_pred <- nrow(x_pred) # design points for predictions
eta_mu <- mean(eta, na.rm = TRUE) # mean value
eta_sd <- sd(eta, na.rm = TRUE) # standard deviation
y <- (y - eta_mu) / eta_sd
eta <- (eta - eta_mu) / eta_sd
x <- rbind(as.matrix(xf), as.matrix(xc))
for (i in (1:ncol(x))){
x_min <- min(x[,i], na.rm = TRUE)
x_max <- max(x[,i], na.rm = TRUE)
xf[,i] <- (xf[,i] - x_min) / (x_max - x_min)
xc[,i] <- (xc[,i] - x_min) / (x_max - x_min)
x_pred[,i] <- (x_pred[,i] - x_min) / (x_max - x_min)
}
for (j in (1:ncol(tc))){
tc_min <- min(tc[,j], na.rm = TRUE)
tc_max <- max(tc[,j], na.rm = TRUE)
tc[,j] <- (tc[,j] - tc_min) / (tc_max - tc_min)
}
stan_data <- list(n=n, m=m, n_pred=n_pred, p=p, y=y, q=q, eta=eta,
xf=as.matrix(xf), xc=as.matrix(xc),
x_pred=as.matrix(x_pred), tc=as.matrix(tc))
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit <- stan(file = "bcWithoutPred.stan",
data = stan_data,
iter = 500,
chains = 2)
stan_trace(fit, pars = c("tf", "beta_eta", "beta_delta",
"lambda_eta", "lambda_delta", "lambda_e"))
print(fit, pars = c("tf", "beta_eta", "beta_delta",
"lambda_eta", "lambda_delta", "lambda_e"))
stan_hist(fit, pars = c("tf"))
samples <- rstan::extract(fit)
y_pred <- y.pred(x_pred, samples, params)
y_pred <- y.pred(x_pred, samples, params = stan_data)
sigma_eta <- gasp.cov(Z, beta_eta[I,], lambda_eta[I])
sigma_b <- gasp.cov(xf, beta_delta[I,], lambda_delta[I])
?ifelse
p==1
p1
p=1
ifelse(p==1, c(xf, x_pred), rbind(xf, x_pred))
p=3
ifelse(p==1, c(xf, x_pred), rbind(xf, x_pred))
X <- ifelse(p==1, c(xf, x_pred), rbind(xf, x_pred))
xf
rbind(xf,x_pred)
if (p==1) c(xf,x_pred); else rbind(xf, x_pred)
if (p==1) c(xf,x_pred) else rbind(xf, x_pred)
p
X<- if (p==1) c(xf,x_pred) else rbind(xf, x_pred)
View(X)
p=1
X <- if (p==1) c(xf,x_pred) else rbind(xf, x_pred)
p=2
params=stan_data
q <- params$q
p <- params$p
n <- params$n
m <- params$m
xf <- params$xf
xc <- params$xc
tc <- params$tc
y <- params$y
eta <- params$eta
nm <- n + m
pq <- p + q
z <- array(data=NA, dim=c(nm, pq))
z[1:n, 1:p] <- as.matrix(xf)
z[(n+1):nm, 1:p] <- as.matrix(xc)
z[(n+1):nm, (p+1):pq] <- as.matrix(tc)
tf <- samples$tf
beta_eta <- samples$beta_eta
beta_delta <- samples$beta_delta
lambda_eta <- samples$lambda_eta
lambda_delta <- samples$lambda_delta
lambda_e <- samples$lambda_e
numrealize <- length(lambda_e)
if(p==1){
npred <- length(x_pred)
xx <- 1
}else{
npred <- nrow(x_pred)
xx <- ncol(x_pred)
}
idxy <- c((1:n),(nm+1):(nm+npred))
y_pred <- array(data=NA, dim=c(numrealize, npred)) # eta + delta
I=1
cat('simulation ',I,' of ',numrealize,'\n')
z[1:n, (p+1):(p+q)] <- as.matrix(rep.row(tf[I,], n))
xtpred <- cbind(as.matrix(x_pred),
rep.row(tf[I,], npred))
Z <- rbind(z,as.matrix(xtpred))
sigma_eta <- gasp.cov(Z, beta_eta[I,], lambda_eta[I])
sigma_b <- gasp.cov(xf, beta_delta[I,], lambda_delta[I])
X <- if (p==1) c(xf, x_pred) else rbind(xf, x_pred)
sigma_B <- gasp.cov(X, beta_delta[I,], lambda_delta[I])
sigma_e <- diag(n) * (1 / lambda_e[I])
sigma_y_pred <- sigma_eta
sigma_y_pred[idxy,idxy] <- sigma_y_pred[idxy,idxy] + sigma_B
sigma_y_pred[1:n,1:n] <- sigma_y_pred[1:n,1:n] + sigma_e
s11 <- sigma_y_pred[1:nm, 1:nm]
s21 <- sigma_y_pred[(nm+1):nrow(sigma_y_pred), 1:nm]
s22 <- sigma_y_pred[(nm+1):nrow(sigma_y_pred), (nm+1):ncol(sigma_y_pred)]
s12 <- sigma_y_pred[1:nm, (nm+1):ncol(sigma_y_pred)]
s11y <- solve(s11, c(y, eta))
E <- s21 %*% s11y
s11s12 <- solve(s11, s12)
s21s11s12 <- s21 %*% s11s12
C <- s22 - s21s11s12
y_pred[I,] <- mvrnorm(1, E, C)
library(MASS)
y_pred[I,] <- mvrnorm(1, E, C)
source("util.R")
y_pred <- y.pred(x_pred, samples, params = stan_data)
n_samples <- nrow(y_pred)
field_data <- data.frame(yf=DATAFIELD[, 1],
xf=signif(DATAFIELD[, (i+1)], 3))
i
pred_data <- matrix(data=t(y_pred),
nrow=length(y_pred), ncol = 1)
plot_data <- data.frame(apply(field_data, 2, rep,
n_samples), pred = pred_data)
plt <- ggplot(data = plot_data, aes(y=pred, x=xf, group=xf)) +
geom_boxplot(outlier.size=0.2) +
geom_point(data = field_data, aes(x=xf, y=yf),
color="#D55E00", size=0.8)
print(plt)
y_pred <- y.pred(x_pred, samples, stan_data) * eta_sd + eta_mu
n_samples <- nrow(y_pred)
field_data <- data.frame(yf=DATAFIELD[, 1],
xf=signif(DATAFIELD[, (i+1)], 3))
pred_data <- matrix(data=t(y_pred),
nrow=length(y_pred), ncol = 1)
plot_data <- data.frame(apply(field_data, 2, rep,
n_samples), pred = pred_data)
plt <- ggplot(data = plot_data, aes(y=pred, x=xf, group=xf)) +
geom_boxplot(outlier.size=0.2) +
geom_point(data = field_data, aes(x=xf, y=yf),
color="#D55E00", size=0.8)
print(plt)
eta_pred <- eta.pred(x_pred, samples, stan_data) * eta_sd + eta_mu
field_data <- data.frame(yf=DATAFIELD[, 1],
xf=signif(DATAFIELD[, (i+1)], 3))
pred_data <- matrix(data=t(y_pred),
nrow=length(y_pred), ncol = 1)
plot_data <- data.frame(apply(field_data, 2, rep,
n_samples), pred = pred_data)
plt <- ggplot(data = plot_data, aes(y=pred, x=xf, group=xf)) +
geom_boxplot(outlier.size=0.2) +
geom_point(data = field_data, aes(x=xf, y=yf),
color="#D55E00", size=0.8)
print(plt)
